name: build-Windows

#on:
#  release:
#    types: [created]

on: [push]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install wheel conan

    - name: Restore conan cache
      uses: actions/cache@v2
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-

    - name: Create Build Environment
      run: cmake -E make_directory build

    - name: Install Conan Libraries
      run: |
        cd build
        conan remote add gitlab https://gitlab.com/api/v4/packages/conan
        conan user gitlab+deploy-token-653038 -r gitlab -p sBwmejFz5Pn-gZPSNFMy
        conan install ..

    - name: Build
      run: |
        cd build
        cmake .. -G "Visual Studio 16 2019" -A x64 -DCONTINOUS_INTEGRATION=1
#       conan build ..

    - name: Display
      run: |
        cd build
        dir
        type version.cpp

    - name: Build2
      run: |
        cd build
        cmake --build . --config Release

#    - name: upload file
#      uses: xresloader/upload-to-github-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        file: "*.dmg;bin/*.dmg;*.app;"
#        tags: true
#        draft: true
#        verbose: true

